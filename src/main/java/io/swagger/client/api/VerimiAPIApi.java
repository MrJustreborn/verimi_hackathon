/**
 * Digital Identity and Payments Platform (verimi)
 * The Digital Identity and Payments Platform (verimi) provides identity,  payment and data services for identity owners and service providers.  The services follows the schema defined by [JSON API](http://jsonapi.org/).    ## Schema  A JSON object MUST be at the root of every JSON API response containing data.  This object defines a document’s \"top level\".  A document MUST contain at least one of the following top-level members:   * `data`: the document’s \"primary data\"   * `errors`: an array of error objects   * `meta`: a meta object that contains non-standard meta-information.   ##  Processing Errors  A server MAY choose to stop processing as soon as a problem is encountered,  or it MAY continue processing and encounter multiple problems.  For instance, a server might process multiple attributes and then return multiple validation problems in a single response.  When a server encounters multiple problems for a single request,  the most generally applicable HTTP error code SHOULD be used in the response.  For instance, 400 Bad Request might be appropriate for multiple 4xx errors or  500 Internal Server Error might be appropriate for multiple 5xx errors.  ## Error Objects  Error objects provide additional information about problems encountered while performing an operation.  Error objects MUST be returned as an array keyed by errors in the top level of a JSON API document.  An error object MUST have the following members:  * `id`: a unique identifier for this particular occurrence of the problem  * `timestamp`: timestamp of the error recorded by the service (GMT) (extension of JSON API)  * `code`: an application-specific error code, expressed as a string value,   that MUST NOT change from occurrence to occurrence of the problem  * `title`: a short, human-readable summary of the problem   that SHOULD NOT change from occurrence to occurrence of the problem,   except for purposes of localization.  * `detail`: a human-readable explanation specific to this occurrence of the problem.   Like title, this field’s value can be localized.       An error object MAY have the following members:  * `status`: the HTTP status code applicable to this problem, expressed as a string value.      * `links`: a links object containing the following members:    * `about`: a link that leads to further details about this particular occurrence of the problem.       * `source`: an object containing references to the source of the error, optionally including any of the following members:    * `pointer`: a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute].    * `parameter`: a string indicating which URI query parameter caused the error.  * `meta`: a meta object containing non-standard meta-information about the error. 
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.LogoutResponse;
import io.swagger.client.model.BasketResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.ScopeData;
import io.swagger.client.model.ReportBlockResponse;
import io.swagger.client.model.TokenErrorResponse;
import io.swagger.client.model.TokenSuccessfulResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.DataTransferResponse;
import io.swagger.client.model.DataTransferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerimiAPIApi {
    private ApiClient apiClient;

    public VerimiAPIApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerimiAPIApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for authorizationUsingGET */
    private com.squareup.okhttp.Call authorizationUsingGETCall(String clientId, String redirectUri, String scope, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorizationUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/oauth/service_provider_access/{client_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (redirectUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "redirect_uri", redirectUri));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "scope", scope));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * OAuth 2.0 authorization endpoint
     * If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means). When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent. # Example (extra line breaks for display purposes only): &#x60;GET&#x60; &#x60;oauth/service_provider_access/s6BhdRkqt3?state&#x3D;xyz&amp;/&#x60; &#x60;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&amp;&#x60; &#x60;scope&#x3D;login write_basket&#x60; &#x60;HTTP/1.1 &#x60; &#x60;Host: server.example.com&#x60; 
     * @param clientId The client identifier. (required)
     * @param redirectUri After completing its interaction with the resource owner, the authorization server directs the resource owner&#39;s user-agent back to this uri. It must be an absolute URI and can contain query components. (optional)
     * @param scope The scope of the access request. The value of the scope parameter is expressed as a list of space-delimited, case-sensitive strings. The strings are defined by the authorization server. (optional)
     * @param state An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery. Recommended to provide. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authorizationUsingGET(String clientId, String redirectUri, String scope, String state) throws ApiException {
        authorizationUsingGETWithHttpInfo(clientId, redirectUri, scope, state);
    }

    /**
     * OAuth 2.0 authorization endpoint
     * If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means). When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent. # Example (extra line breaks for display purposes only): &#x60;GET&#x60; &#x60;oauth/service_provider_access/s6BhdRkqt3?state&#x3D;xyz&amp;/&#x60; &#x60;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&amp;&#x60; &#x60;scope&#x3D;login write_basket&#x60; &#x60;HTTP/1.1 &#x60; &#x60;Host: server.example.com&#x60; 
     * @param clientId The client identifier. (required)
     * @param redirectUri After completing its interaction with the resource owner, the authorization server directs the resource owner&#39;s user-agent back to this uri. It must be an absolute URI and can contain query components. (optional)
     * @param scope The scope of the access request. The value of the scope parameter is expressed as a list of space-delimited, case-sensitive strings. The strings are defined by the authorization server. (optional)
     * @param state An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery. Recommended to provide. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authorizationUsingGETWithHttpInfo(String clientId, String redirectUri, String scope, String state) throws ApiException {
        com.squareup.okhttp.Call call = authorizationUsingGETCall(clientId, redirectUri, scope, state, null, null);
        return apiClient.execute(call);
    }

    /**
     * OAuth 2.0 authorization endpoint (asynchronously)
     * If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means). When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent. # Example (extra line breaks for display purposes only): &#x60;GET&#x60; &#x60;oauth/service_provider_access/s6BhdRkqt3?state&#x3D;xyz&amp;/&#x60; &#x60;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&amp;&#x60; &#x60;scope&#x3D;login write_basket&#x60; &#x60;HTTP/1.1 &#x60; &#x60;Host: server.example.com&#x60; 
     * @param clientId The client identifier. (required)
     * @param redirectUri After completing its interaction with the resource owner, the authorization server directs the resource owner&#39;s user-agent back to this uri. It must be an absolute URI and can contain query components. (optional)
     * @param scope The scope of the access request. The value of the scope parameter is expressed as a list of space-delimited, case-sensitive strings. The strings are defined by the authorization server. (optional)
     * @param state An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery. Recommended to provide. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizationUsingGETAsync(String clientId, String redirectUri, String scope, String state, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizationUsingGETCall(clientId, redirectUri, scope, state, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for forceLogout */
    private com.squareup.okhttp.Call forceLogoutCall(String reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling forceLogout(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/user/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reason != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reason", reason));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Service for forcing logout from verimi
     * 
     * @param reason Reason for logout (required)
     * @return LogoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogoutResponse forceLogout(String reason) throws ApiException {
        ApiResponse<LogoutResponse> resp = forceLogoutWithHttpInfo(reason);
        return resp.getData();
    }

    /**
     * Service for forcing logout from verimi
     * 
     * @param reason Reason for logout (required)
     * @return ApiResponse&lt;LogoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogoutResponse> forceLogoutWithHttpInfo(String reason) throws ApiException {
        com.squareup.okhttp.Call call = forceLogoutCall(reason, null, null);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Service for forcing logout from verimi (asynchronously)
     * 
     * @param reason Reason for logout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call forceLogoutAsync(String reason, final ApiCallback<LogoutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = forceLogoutCall(reason, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBasket */
    private com.squareup.okhttp.Call getBasketCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/query/baskets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Service to get Basket. Basket id is provided in OAuth access token.
     * 
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BasketResponse getBasket() throws ApiException {
        ApiResponse<BasketResponse> resp = getBasketWithHttpInfo();
        return resp.getData();
    }

    /**
     * Service to get Basket. Basket id is provided in OAuth access token.
     * 
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BasketResponse> getBasketWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBasketCall(null, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Service to get Basket. Basket id is provided in OAuth access token. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasketAsync(final ApiCallback<BasketResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasketCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBasketScopeData */
    private com.squareup.okhttp.Call getBasketScopeDataCall(String scopeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling getBasketScopeData(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/query/baskets/scopes/{scopeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "scopeId" + "\\}", apiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Service for getting specific scope data. Basket id is provided in OAuth access token.
     * 
     * @param scopeId Scope. (required)
     * @return ScopeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScopeData getBasketScopeData(String scopeId) throws ApiException {
        ApiResponse<ScopeData> resp = getBasketScopeDataWithHttpInfo(scopeId);
        return resp.getData();
    }

    /**
     * Service for getting specific scope data. Basket id is provided in OAuth access token.
     * 
     * @param scopeId Scope. (required)
     * @return ApiResponse&lt;ScopeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScopeData> getBasketScopeDataWithHttpInfo(String scopeId) throws ApiException {
        com.squareup.okhttp.Call call = getBasketScopeDataCall(scopeId, null, null);
        Type localVarReturnType = new TypeToken<ScopeData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Service for getting specific scope data. Basket id is provided in OAuth access token. (asynchronously)
     * 
     * @param scopeId Scope. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBasketScopeDataAsync(String scopeId, final ApiCallback<ScopeData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBasketScopeDataCall(scopeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScopeData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reportBlock */
    private com.squareup.okhttp.Call reportBlockCall(String reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling reportBlock(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/user/reportBlock".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (reason != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reason", reason));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Service for reporting issues with Identity Owner to verimi
     * 
     * @param reason Reason for report (required)
     * @return ReportBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportBlockResponse reportBlock(String reason) throws ApiException {
        ApiResponse<ReportBlockResponse> resp = reportBlockWithHttpInfo(reason);
        return resp.getData();
    }

    /**
     * Service for reporting issues with Identity Owner to verimi
     * 
     * @param reason Reason for report (required)
     * @return ApiResponse&lt;ReportBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportBlockResponse> reportBlockWithHttpInfo(String reason) throws ApiException {
        com.squareup.okhttp.Call call = reportBlockCall(reason, null, null);
        Type localVarReturnType = new TypeToken<ReportBlockResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Service for reporting issues with Identity Owner to verimi (asynchronously)
     * 
     * @param reason Reason for report (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportBlockAsync(String reason, final ApiCallback<ReportBlockResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportBlockCall(reason, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportBlockResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for tokenUsingGET */
    private com.squareup.okhttp.Call tokenUsingGETCall(String grantType, String code, String redirectUri, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling tokenUsingGET(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling tokenUsingGET(Async)");
        }
        
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling tokenUsingGET(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling tokenUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/oauth/token".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (grantType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "grant_type", grantType));
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "code", code));
        if (redirectUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "redirect_uri", redirectUri));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "client_id", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_simple" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * OAuth 2.0 token endpoint
     * If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server. If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token. # Example (extra line breaks for display purposes only):  &#x60;POST /token HTTP/1.1&#x60; &#x60;Host: server.example.com&#x60; &#x60;Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW&#x60; &#x60;Content-Type: application/x-www-form-urlencoded&#x60;  &#x60;grant_type&#x3D;authorization_code&amp;code&#x3D;SplxlOBeZQQYbYS6WxSbIA&#x60; &#x60;&amp;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&#x60; 
     * @param grantType Value MUST be set to \&quot;authorization_code\&quot;. (required)
     * @param code The authorization code received from the authorization server. (required)
     * @param redirectUri REQUIRED, if the &#39;redirect_uri&#39; parameter was included in the authorization request, and their values MUST be identical. (required)
     * @param clientId REQUIRED, if the client is not authenticating with the authorization server. (required)
     * @return TokenSuccessfulResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenSuccessfulResponse tokenUsingGET(String grantType, String code, String redirectUri, String clientId) throws ApiException {
        ApiResponse<TokenSuccessfulResponse> resp = tokenUsingGETWithHttpInfo(grantType, code, redirectUri, clientId);
        return resp.getData();
    }

    /**
     * OAuth 2.0 token endpoint
     * If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server. If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token. # Example (extra line breaks for display purposes only):  &#x60;POST /token HTTP/1.1&#x60; &#x60;Host: server.example.com&#x60; &#x60;Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW&#x60; &#x60;Content-Type: application/x-www-form-urlencoded&#x60;  &#x60;grant_type&#x3D;authorization_code&amp;code&#x3D;SplxlOBeZQQYbYS6WxSbIA&#x60; &#x60;&amp;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&#x60; 
     * @param grantType Value MUST be set to \&quot;authorization_code\&quot;. (required)
     * @param code The authorization code received from the authorization server. (required)
     * @param redirectUri REQUIRED, if the &#39;redirect_uri&#39; parameter was included in the authorization request, and their values MUST be identical. (required)
     * @param clientId REQUIRED, if the client is not authenticating with the authorization server. (required)
     * @return ApiResponse&lt;TokenSuccessfulResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenSuccessfulResponse> tokenUsingGETWithHttpInfo(String grantType, String code, String redirectUri, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = tokenUsingGETCall(grantType, code, redirectUri, clientId, null, null);
        Type localVarReturnType = new TypeToken<TokenSuccessfulResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth 2.0 token endpoint (asynchronously)
     * If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server. If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token. # Example (extra line breaks for display purposes only):  &#x60;POST /token HTTP/1.1&#x60; &#x60;Host: server.example.com&#x60; &#x60;Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW&#x60; &#x60;Content-Type: application/x-www-form-urlencoded&#x60;  &#x60;grant_type&#x3D;authorization_code&amp;code&#x3D;SplxlOBeZQQYbYS6WxSbIA&#x60; &#x60;&amp;redirect_uri&#x3D;https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&#x60; 
     * @param grantType Value MUST be set to \&quot;authorization_code\&quot;. (required)
     * @param code The authorization code received from the authorization server. (required)
     * @param redirectUri REQUIRED, if the &#39;redirect_uri&#39; parameter was included in the authorization request, and their values MUST be identical. (required)
     * @param clientId REQUIRED, if the client is not authenticating with the authorization server. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tokenUsingGETAsync(String grantType, String code, String redirectUri, String clientId, final ApiCallback<TokenSuccessfulResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tokenUsingGETCall(grantType, code, redirectUri, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenSuccessfulResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for transferData */
    private com.squareup.okhttp.Call transferDataCall(DataTransferRequest dataTransferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dataTransferRequest;
        
        // verify the required parameter 'dataTransferRequest' is set
        if (dataTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'dataTransferRequest' when calling transferData(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/command/baskets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "sdk_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Transfer Identity Owner data from Service Provider to verimi
     * Transfer data to Service Provider
     * @param dataTransferRequest Data required to transfer to verimi account. (required)
     * @return DataTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataTransferResponse transferData(DataTransferRequest dataTransferRequest) throws ApiException {
        ApiResponse<DataTransferResponse> resp = transferDataWithHttpInfo(dataTransferRequest);
        return resp.getData();
    }

    /**
     * Transfer Identity Owner data from Service Provider to verimi
     * Transfer data to Service Provider
     * @param dataTransferRequest Data required to transfer to verimi account. (required)
     * @return ApiResponse&lt;DataTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataTransferResponse> transferDataWithHttpInfo(DataTransferRequest dataTransferRequest) throws ApiException {
        com.squareup.okhttp.Call call = transferDataCall(dataTransferRequest, null, null);
        Type localVarReturnType = new TypeToken<DataTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transfer Identity Owner data from Service Provider to verimi (asynchronously)
     * Transfer data to Service Provider
     * @param dataTransferRequest Data required to transfer to verimi account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferDataAsync(DataTransferRequest dataTransferRequest, final ApiCallback<DataTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferDataCall(dataTransferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
