swagger: "2.0"
info: 
  title: Digital Identity and Payments Platform (verimi)
  version: 1.0.0-SNAPSHOT
  description: >
    The Digital Identity and Payments Platform (verimi) provides identity, 
    payment and data services for identity owners and service providers.


    The services follows the schema defined by [JSON API](http://jsonapi.org/).  


    ## Schema


    A JSON object MUST be at the root of every JSON API response containing data. 
    This object defines a document’s "top level". 
    A document MUST contain at least one of the following top-level members:
      * `data`: the document’s "primary data"
      * `errors`: an array of error objects
      * `meta`: a meta object that contains non-standard meta-information.
    
    
    ##  Processing Errors


    A server MAY choose to stop processing as soon as a problem is encountered, 
    or it MAY continue processing and encounter multiple problems. 
    For instance, a server might process multiple attributes and then return multiple validation problems in a single response.


    When a server encounters multiple problems for a single request, 
    the most generally applicable HTTP error code SHOULD be used in the response. 
    For instance, 400 Bad Request might be appropriate for multiple 4xx errors or 
    500 Internal Server Error might be appropriate for multiple 5xx errors.


    ## Error Objects


    Error objects provide additional information about problems encountered while performing an operation. 
    Error objects MUST be returned as an array keyed by errors in the top level of a JSON API document.


    An error object MUST have the following members:
     * `id`: a unique identifier for this particular occurrence of the problem
     * `timestamp`: timestamp of the error recorded by the service (GMT) (extension of JSON API)
     * `code`: an application-specific error code, expressed as a string value, 
     that MUST NOT change from occurrence to occurrence of the problem
     * `title`: a short, human-readable summary of the problem 
     that SHOULD NOT change from occurrence to occurrence of the problem, 
     except for purposes of localization.
     * `detail`: a human-readable explanation specific to this occurrence of the problem. 
     Like title, this field’s value can be localized.
        

    An error object MAY have the following members:
     * `status`: the HTTP status code applicable to this problem, expressed as a string value.    
     * `links`: a links object containing the following members:
       * `about`: a link that leads to further details about this particular occurrence of the problem.     
     * `source`: an object containing references to the source of the error, optionally including any of the following members:
       * `pointer`: a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
       * `parameter`: a string indicating which URI query parameter caused the error.
     * `meta`: a meta object containing non-standard meta-information about the error.
host: "verimi.com"
schemes: ["https"]
basePath: "/dipp/api/"
tags: 
- name: verimiAPI
  description: "verimi API documentation"
  externalDocs: 
    description: verimi API Model
    url: https://verimi.com
- name: examples
  description: "Examples about error messages using JSON API schema"
  externalDocs: 
    description: JSON API Specification
    url: http://jsonapi.org/format/

paths:          
  /examples/error: 
    get:
      tags:
      - examples-error
      summary: Example for error messages
      responses:
        400:
          description: The server cannot or will not process the request due to an apparent client error (i.e. validation error)
          schema:
            $ref: "#/definitions/ResponseDocument"
          examples: 
            application/json:
              errors:           
              - id: e183203d-9168-44de-834a-1b0ccb21df87
                timestamp: "2017-07-04T16:20:50.52Z"
                code: error.client.validation.email
                status: "400"
                title: "Error: invalid email address"
                detail: "Email address is invalid. A valid email address is like 'john.smith@example.com'."            
              - id: 23b1189d-ff2b-4865-b0f1-491138de7db8
                timestamp: "2017-07-04T16:20:50.52Z"
                code: error.client.validation.email.password.strength
                status: "400"
                title: "Error: invalid password"
                detail: "Password is invalid. It shall be minimum 8 characters in length. It shall contain three out of the following items: Uppercase Letters, Lowercase Letters, Numbers, Symbols"
        503:
          description: The server is unavailable (because it is overloaded or down for maintenance).
          schema:
            $ref: "#/definitions/ResponseDocument"
          examples: 
            application/json:
              errors:           
              - id: 88564547-0a2e-4efa-bdaa-16835f676c82
                timestamp: "2017-07-04T16:20:50.52Z"
                code: error.server.maintenance
                status: ""
                title: "Error: server is unavailable"
                detail: "The server is unavailable between July 5, 2017 10:00 pm and July 6, 2017 10:00 am due to maintenance."
  /user/logout:
    post:
      tags:
      - "verimiAPI"
      summary: "Service for forcing logout from verimi"
      operationId: "forceLogout"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "reason"
        in: "query"
        description: "Reason for logout"
        required: true
        type: "string"
      responses:
        200:
          description: "Identity owner successfully log out"
          schema:
            $ref: "#/definitions/LogoutResponse"
        404:
          description: "Resource not found: Uid must be set."
      security:
        - sdk_auth:
          - "login"
  /user/reportBlock:
    post:
      tags:
      - "verimiAPI"
      summary: "Service for reporting issues with Identity Owner to verimi"
      operationId: "reportBlock"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "reason"
        in: "query"
        description: "Reason for report"
        required: true
        type: "string"
      responses:
        200:
          description: "Identity owner successfully log out"
          schema:
            $ref: "#/definitions/ReportBlockResponse"
        404:
          description: "Resource not found: Uid must be set."
      security:
        - sdk_auth:
          - "login"
  /oauth/service_provider_access/{client_id}:
    get:
      tags:
      - "verimiAPI"
      summary: "OAuth 2.0 authorization endpoint"
      description: |
        If the request is valid, the authorization server authenticates the resource owner and obtains an authorization decision (by asking the resource owner or by establishing approval via other means). When a decision is established, the authorization server directs the user-agent to the provided client redirection URI using an HTTP redirection response, or by other means available to it via the user-agent.
        # Example (extra line breaks for display purposes only):
        `GET`
        `oauth/service_provider_access/s6BhdRkqt3?state=xyz&/`
        `redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&`
        `scope=login write_basket`
        `HTTP/1.1 `
        `Host: server.example.com`

      operationId: "authorizationUsingGET"
      produces:
      - "*/*"
      parameters:
      - in: "path"
        name: "client_id"
        description: "The client identifier."
        required: true
        type: "string"
      - in: "query"
        name: "redirect_uri"
        description: "After completing its interaction with the resource owner, 
        the authorization server directs the resource owner's user-agent back to this uri. 
        It must be an absolute URI and can contain query components."
        required: false
        type: "string"
      - in: "query"
        name: "scope"
        description: "The scope of the access request. The value of the scope parameter is expressed as a list 
        of space-delimited, case-sensitive strings. The strings are defined by the authorization server."
        required: false
        type: "string"
      - in: "query"
        name: "state"
        description: "An opaque value used by the client to maintain state between the request and callback. 
        The authorization server includes this value when redirecting the user-agent back to the client. 
        The parameter SHOULD be used for preventing cross-site request forgery. Recommended to provide."
        required: false
        type: "string"

      responses:
        200:
          description: "In case the user is not authenticated then a login page is returned. In case the user have not authorized the client to access the resource, a consent page is returned."
        302:
          description: |
            If the user is already authenticated, the endpoint returns with status code 302 both in success and error cases, the only exception is when invalid redirect_uri is provided.
            # The success case
            The resource owner grants the access request. The authorization server issues an authorization code and delivers it to the client by adding the parameters to the query component of the redirection URI which was provided in the request's 'redirect_uri' query component.
            * code:
            The authorization code generated by the authorization server.
            * state:
            If the 'state' parameter was present in the client authorization request, the exact value received from the client.
            # The error case
            If the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the following parameters to the query component of the redirection URI:
            * error
              * invalid request
              The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.
              * unauthorized_client
              The client is not authorized to request an authorization code using this method.
              * access_denied
              The resource owner or authorization server denied the request.
              * unsupported_response_type
              The authorization server does not support obtaining an authorization code using this method.
              * invalid_scope
              The requested scope is invalid, unknown, or malformed.
              * server_error
              The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)
              * temporarily_unavailable
              The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)
            * error_description
            Optional. Additional information about the error.
            * error_uri
            Optional. A URI identifying a web page with information about the error.
        401:
          description:
            "Invalid or missing 'client_id'."
        404:
          description:
            "Invalid 'redirect_uri' query param was provided."
          headers:
            location:
              type: "string"
              description: "The redirect URI with the added query components."
      security:
        - sdk_auth:
          - "login"
  /oauth/token:
    post:
      tags:
      - "verimiAPI"
      summary: "OAuth 2.0 token endpoint"
      description: |
        If the client type is confidential or the client was issued client credentials (or assigned other authentication requirements), the client MUST authenticate with the authorization server. If the access token request is valid and authorized, the authorization server issues an access token and optional refresh token.
        # Example (extra line breaks for display purposes only):

        `POST /token HTTP/1.1`
        `Host: server.example.com`
        `Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW`
        `Content-Type: application/x-www-form-urlencoded`

        `grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA`
        `&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb`

      operationId: "tokenUsingGET"
      produces:
      - "*/*"
      parameters:
      - in: "query"
        name: "grant_type"
        description: Value MUST be set to "authorization_code".
        required: true
        type: "string"
      - in: "query"
        name: "code"
        description: "The authorization code received from the authorization server."
        required: true
        type: "string"
      - in: "query"
        name: "redirect_uri"
        description: "REQUIRED, if the 'redirect_uri' parameter was included in the authorization request, and their values MUST be identical."
        required: true
        type: "string"
      - in: "query"
        name: "client_id"
        description: "REQUIRED, if the client is not authenticating with the authorization server."
        required: true
        type: "string"
      security:
        - sdk_simple:
          - "login"
      responses:
        200:
          description: "The authorization server issues an access token and optional refresh token."
          schema:
            $ref: "#/definitions/TokenSuccessfulResponse"
        400:
          description: "Bad request."
          schema:
            $ref: "#/definitions/TokenErrorResponse"
  /query/baskets:
    get:
      tags:
      - verimiAPI
      summary: Service to get Basket. Basket id is provided in OAuth access token.
      operationId: get-basket
      consumes:
      - "*/*"
      produces:
      - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BasketResponse'
        400:
          description: Basket id not defined in path parameter.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Basket not found.<br/>
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - sdk_auth:
          - "read_basket"
          - "login"
  /command/baskets:
    put:
      tags:
      - "verimiAPI"
      summary: "Transfer Identity Owner data from Service Provider to verimi"
      description: "Transfer data to Service Provider"
      operationId: "transferData"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "DataTransferRequest"
        in: "body"
        description: "Data required to transfer to verimi account."
        required: true
        schema:
          $ref: "#/definitions/DataTransferRequest"
      responses:
        200:
          description: "Data are transferred succesfully and stored into verimi system"
          schema:
            $ref: "#/definitions/DataTransferResponse"
        401:
          description: "Unauthorized request. Happens when the provided bearer token is wrong"
        400:
          description: "If the request was not valid"
          schema:
            $ref: "#/definitions/Error"
      security:
        - sdk_auth:
          - "write_basket"
          - "login"
  /query/baskets/scopes/{scopeId}:
    get:
      tags:
      - verimiAPI
      summary: Service for getting specific scope data. Basket id is provided in OAuth access token.
      operationId: get-basket-scope-data
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: scopeId
        in: path
        description: Scope.
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ScopeData'
        400:
          description: Basket id or scope not defined in path parameter.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Basket or scope not found.<br/>
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
        - sdk_auth:
          - "login"
          - "read_basket"
          - "write_basket"
securityDefinitions:
  sdk_auth:
    type: "oauth2"
    authorizationUrl: "https://verimi.com/dipp/api/oauth/service_provider_access"
    tokenUrl: "https://verimi.com/oauth/token"
    flow: "accessCode"
    scopes:
      login: "Scope for logging in to verimi."
      read_basket: "Scope for reading basket."
      write_basket: "Scope for writing basket."
  sdk_simple:
    type: "oauth2"
    tokenUrl: "https://verimi.com/oauth/token"
    flow: "password"
    scopes:
      login: "Scope for logging in to verimi."
definitions:
  ResponseDocument:
    description: >
      A JSON object MUST be at the root of every JSON API response containing data. 
      This object defines a document’s "top level". 
    properties: 
      data: 
        type: object
        description: The document’s "primary data" 
      errors:         
        description: An array of error objects
        type: array
        items:
          $ref: '#/definitions/ResponseError'
      meta: 
        $ref: '#/definitions/ResponseMeta'
  ResponseError:
    type: object
    description: >
      Error objects provide additional information about problems encountered while performing an operation. 
      Error objects MUST be returned as an array keyed by errors in the top level of a JSON API document.
    required:
      - id
      - code
      - timestamp
      - title
      - detail
    properties:
      id: 
        type: string
        description: A unique identifier for this particular occurrence of the problem
      code: 
        type: string
        description: >
          An application-specific error code, expressed as a string value, 
          that MUST NOT change from occurrence to occurrence of the problem
      timestamp: 
        type: string
        format: date-time
        description: Timestamp of the error recorded by the service (UTC)
        example: "2017-07-04T16:20:50.52Z"
      title: 
        type: string
        description: >
          A short, human-readable summary of the problem 
          that SHOULD NOT change from occurrence to occurrence of the problem, 
          except for purposes of localization.
      detail: 
        type: string
        description: > 
           A human-readable explanation specific to this occurrence of the problem. 
           Like title, this field’s value can be localized.
      status: 
        type: string
        description: The HTTP status code applicable to this problem, expressed as a string value.    
      links: 
        type: object
        description: >
          Where specified, a links member can be used to represent links. 
          The value of each links member MUST be an object (a “links object”).
          Each member of a links object is a “link”. 
          A link MUST be represented as either a string containing the link’s URL 
          or an object (“link object”) which can contain "href" (a string containing the link’s URL) 
          and "meta" (a meta object containing non-standard meta-information about the link).
      source:
        type: object
        description: An object containing references to the source of the error
      meta:
        type: object
        description: A meta object containing non-standard meta-information about the error.
  ResponseMeta:
    type: object
    description: > 
      Where specified, a meta member can be used to include non-standard meta-information. 
      The value of each meta member MUST be an object (a “meta object”).
      Any members MAY be specified within meta objects.
  LogoutResponse:
    type: "object"
    properties:
      logout:
        type: "boolean"
  ReportBlockResponse:
    type: "object"
    properties:
      status:
        type: "string"
  TokenSuccessfulResponse:
    type: "object"
    properties: 
      access_token:
        type: "string"
        description: "The access token issued by the authorization server."
      id_token:
        type: "string"
        description: "The ID token."
      token_type:
        type: "string"
        description: "The type of the token issued."
      expires_in:
        type: "string"
        description: "Optional. The lifetime in seconds of the access token."
      refresh_token:
        type: "string"
        description: "Optional. The refresh token, which can be used to obtain new access tokens using the same authorization grant"
      scope:
        type: "string"
        description: "Optional. The scope of the access token."
  TokenErrorResponse:
    type: "object"
    properties:
      error:
        type: "string"
        description: |  
          # A single error code from the following:
          * invalid_request 
          The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.

          * invalid_client
          Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the "Authorization" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the "WWW-Authenticate" response header field matching the authentication scheme used by the client.

          * invalid_grant
          The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.

          * unauthorized_client
          The authenticated client is not authorized to use this authorization grant type.

          * unsupported_grant_type
          The authorization grant type is not supported by the authorization server.

          * invalid_scope
          The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.

      error_description:
        type: "string"
        description: "Optional. Additional information about the error."
      error_uri:
        type: "string"
        description: "Optional. A URI identifying a web page with information about the error."
  BasketResponse:
    type: object
    properties:
      basketId:
        type: string
        description: Basket id.
      dataScopes:
        type: array
        description: User Scope Data.
        items:
          $ref: '#/definitions/ScopeData'
  ScopeData:
    type: object  
    properties:
      scopeId:
        type: string
        description: Data scope id.
      data:
        type: array
        description: Scope data.
        items:
          $ref: '#/definitions/DataField'
  DataField:
    type: object
    properties:
      name:
        type: string
        description: Field name.
      value:
        type: string
        description: Field value.

  ErrorResponse:
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/ErrorResponseElement"
  ErrorResponseElement:
    type: "object"
    properties:
      id:
        type: "string"
      timestamp:
        type: "string"
      detail:
        type: "string"
      code:
        type: "string"
      source:
        $ref: "#/definitions/SourceElement"
  SourceElement:
    type: "object"
    properties:
      parameter:
        type: "string"
  DataTransferRequest:
    type: "object"
    properties:
      externalIdentityOwnerId:
        type: "string"
      dataScopes:
        type: array
        description: User Scope Data.
        items:
          $ref: '#/definitions/ScopeData'
  DataTransferResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      transferId:
        type: "string"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
      name:
        type: "string"
      message:
        type: "string"
      description:
        type: "string"
      transferId:
        type: "string"

        